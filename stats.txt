psutil.cpu_stats()
Return various CPU statistics as a named tuple:

ctx_switches: number of context switches (voluntary + involuntary) since boot.
interrupts: number of interrupts since boot.
soft_interrupts: number of software interrupts since boot. Always set to 0 on Windows and SunOS.
syscalls: number of system calls since boot. Always set to 0 on Linux.

-----------

psutil.cpu_freq(percpu=False)
Return CPU frequency as a nameduple including current, min and max frequencies expressed in Mhz. On Linux current frequency reports the real-time value, on all other platforms it represents the nominal “fixed” value. If percpu is True and the system supports per-cpu frequency retrieval (Linux only) a list of frequencies is returned for each CPU, if not, a list with a single element is returned. If min and max cannot be determined they are set to 0.

-------

psutil.virtual_memory()
Return statistics about system memory usage as a named tuple including the following fields, expressed in bytes. Main metrics:

total: total physical memory.
available: the memory that can be given instantly to processes without the system going into swap. This is calculated by summing different memory values depending on the platform and it is supposed to be used to monitor actual memory usage in a cross platform fashion.
Other metrics:

used: memory used, calculated differently depending on the platform and designed for informational purposes only. total - free does not necessarily match used.
free: memory not being used at all (zeroed) that is readily available; note that this doesn’t reflect the actual memory available (use available instead). total - used does not necessarily match free.
active (UNIX): memory currently in use or very recently used, and so it is in RAM.
inactive (UNIX): memory that is marked as not used.
buffers (Linux, BSD): cache for things like file system metadata.
cached (Linux, BSD): cache for various things.
shared (Linux, BSD): memory that may be simultaneously accessed by multiple processes.
slab (Linux): in-kernel data structures cache.
wired (BSD, macOS): memory that is marked to always stay in RAM. It is never moved to disk.
The sum of used and available does not necessarily equal total. On Windows available and free are the same.


---------

psutil.process_iter(attrs=None, ad_value=None)
Return an iterator yielding a Process class instance for all running processes on the local machine. Every instance is only created once and then cached into an internal table which is updated every time an element is yielded. Cached Process instances are checked for identity so that you’re safe in case a PID has been reused by another process, in which case the cached instance is updated. This is preferred over psutil.pids() for iterating over processes. Sorting order in which processes are returned is based on their PID. attrs and ad_value have the same meaning as in Process.as_dict(). If attrs is specified Process.as_dict() is called internally and the resulting dict is stored as a info attribute which is attached to the returned Process instances. If attrs is an empty list it will retrieve all process info (slow). 

------------

Tkinter is a Python binding to the Tk GUI toolkit. It is the standard Python interface to the Tk GUI toolkit, and is Python's de facto standard GUI. Tkinter is included with standard Linux, Microsoft Windows and Mac OS X installs of Python. The name Tkinter comes from Tk interface.



----------------

psutil (python system and process utilities) is a cross-platform library for retrieving information on running processes and system utilization (CPU, memory, disks, network, sensors) in Python. It is useful mainly for system monitoring, profiling, limiting process resources and the management of running processes.




